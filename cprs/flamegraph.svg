<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="1107"><g><title>checked_request2size (4 samples, 0.36%)</title><rect x="12.1048%" y="453" width="0.3613%" height="15" fill="rgb(227,0,7)" fg:x="134" fg:w="4"/><text x="12.3548%" y="463.50"></text></g><g><title>__GI___libc_malloc (34 samples, 3.07%)</title><rect x="9.6658%" y="469" width="3.0714%" height="15" fill="rgb(217,0,24)" fg:x="107" fg:w="34"/><text x="9.9158%" y="479.50">__G..</text></g><g><title>tcache_get (3 samples, 0.27%)</title><rect x="12.4661%" y="453" width="0.2710%" height="15" fill="rgb(221,193,54)" fg:x="138" fg:w="3"/><text x="12.7161%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.27%)</title><rect x="12.7371%" y="469" width="0.2710%" height="15" fill="rgb(248,212,6)" fg:x="141" fg:w="3"/><text x="12.9871%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (65 samples, 5.87%)</title><rect x="7.3171%" y="485" width="5.8717%" height="15" fill="rgb(208,68,35)" fg:x="81" fg:w="65"/><text x="7.5671%" y="495.50">&lt;alloc:..</text></g><g><title>__rdl_alloc (2 samples, 0.18%)</title><rect x="13.0081%" y="469" width="0.1807%" height="15" fill="rgb(232,128,0)" fg:x="144" fg:w="2"/><text x="13.2581%" y="479.50"></text></g><g><title>__GI___pthread_disable_asynccancel (2 samples, 0.18%)</title><rect x="16.3505%" y="437" width="0.1807%" height="15" fill="rgb(207,160,47)" fg:x="181" fg:w="2"/><text x="16.6005%" y="447.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (39 samples, 3.52%)</title><rect x="13.1888%" y="485" width="3.5230%" height="15" fill="rgb(228,23,34)" fg:x="146" fg:w="39"/><text x="13.4388%" y="495.50">&lt;st..</text></g><g><title>__GI___libc_read (20 samples, 1.81%)</title><rect x="14.9051%" y="469" width="1.8067%" height="15" fill="rgb(218,30,26)" fg:x="165" fg:w="20"/><text x="15.1551%" y="479.50">_..</text></g><g><title>__GI___libc_read (18 samples, 1.63%)</title><rect x="15.0858%" y="453" width="1.6260%" height="15" fill="rgb(220,122,19)" fg:x="167" fg:w="18"/><text x="15.3358%" y="463.50"></text></g><g><title>__GI___pthread_enable_asynccancel (2 samples, 0.18%)</title><rect x="16.5312%" y="437" width="0.1807%" height="15" fill="rgb(250,228,42)" fg:x="183" fg:w="2"/><text x="16.7812%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="18.6089%" y="469" width="0.0903%" height="15" fill="rgb(240,193,28)" fg:x="206" fg:w="1"/><text x="18.8589%" y="479.50"></text></g><g><title>__GI___pthread_disable_asynccancel (4 samples, 0.36%)</title><rect x="18.6992%" y="469" width="0.3613%" height="15" fill="rgb(216,20,37)" fg:x="207" fg:w="4"/><text x="18.9492%" y="479.50"></text></g><g><title>__GI___close (27 samples, 2.44%)</title><rect x="16.7118%" y="485" width="2.4390%" height="15" fill="rgb(206,188,39)" fg:x="185" fg:w="27"/><text x="16.9618%" y="495.50">__..</text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="19.0605%" y="469" width="0.0903%" height="15" fill="rgb(217,207,13)" fg:x="211" fg:w="1"/><text x="19.3105%" y="479.50"></text></g><g><title>__memset_avx2_unaligned_erms (179 samples, 16.17%)</title><rect x="19.1509%" y="485" width="16.1698%" height="15" fill="rgb(231,73,38)" fg:x="212" fg:w="179"/><text x="19.4009%" y="495.50">__memset_avx2_unaligned_e..</text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.81%)</title><rect x="36.2240%" y="469" width="0.8130%" height="15" fill="rgb(225,20,46)" fg:x="401" fg:w="9"/><text x="36.4740%" y="479.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (6 samples, 0.54%)</title><rect x="37.0370%" y="469" width="0.5420%" height="15" fill="rgb(210,31,41)" fg:x="410" fg:w="6"/><text x="37.2870%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="42.0958%" y="437" width="0.1807%" height="15" fill="rgb(221,200,47)" fg:x="466" fg:w="2"/><text x="42.3458%" y="447.50"></text></g><g><title>__GI___pthread_disable_asynccancel (3 samples, 0.27%)</title><rect x="42.2764%" y="437" width="0.2710%" height="15" fill="rgb(226,26,5)" fg:x="468" fg:w="3"/><text x="42.5264%" y="447.50"></text></g><g><title>std::fs::OpenOptions::_open (85 samples, 7.68%)</title><rect x="35.3207%" y="485" width="7.6784%" height="15" fill="rgb(249,33,26)" fg:x="391" fg:w="85"/><text x="35.5707%" y="495.50">std::fs::Op..</text></g><g><title>std::sys::pal::unix::fs::File::open_c (60 samples, 5.42%)</title><rect x="37.5790%" y="469" width="5.4201%" height="15" fill="rgb(235,183,28)" fg:x="416" fg:w="60"/><text x="37.8290%" y="479.50">std::sy..</text></g><g><title>__libc_open64 (45 samples, 4.07%)</title><rect x="38.9341%" y="453" width="4.0650%" height="15" fill="rgb(221,5,38)" fg:x="431" fg:w="45"/><text x="39.1841%" y="463.50">__li..</text></g><g><title>__GI___pthread_enable_asynccancel (5 samples, 0.45%)</title><rect x="42.5474%" y="437" width="0.4517%" height="15" fill="rgb(247,18,42)" fg:x="471" fg:w="5"/><text x="42.7974%" y="447.50"></text></g><g><title>std::io::Write::write_all (56 samples, 5.06%)</title><rect x="42.9991%" y="485" width="5.0587%" height="15" fill="rgb(241,131,45)" fg:x="476" fg:w="56"/><text x="43.2491%" y="495.50">std::i..</text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (37 samples, 3.34%)</title><rect x="44.7154%" y="469" width="3.3424%" height="15" fill="rgb(249,31,29)" fg:x="495" fg:w="37"/><text x="44.9654%" y="479.50">&lt;st..</text></g><g><title>__GI___libc_write (27 samples, 2.44%)</title><rect x="45.6188%" y="453" width="2.4390%" height="15" fill="rgb(225,111,53)" fg:x="505" fg:w="27"/><text x="45.8688%" y="463.50">__..</text></g><g><title>__GI___libc_write (24 samples, 2.17%)</title><rect x="45.8898%" y="437" width="2.1680%" height="15" fill="rgb(238,160,17)" fg:x="508" fg:w="24"/><text x="46.1398%" y="447.50">_..</text></g><g><title>__GI___pthread_disable_asynccancel (5 samples, 0.45%)</title><rect x="47.6061%" y="421" width="0.4517%" height="15" fill="rgb(214,148,48)" fg:x="527" fg:w="5"/><text x="47.8561%" y="431.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="50.2258%" y="453" width="0.0903%" height="15" fill="rgb(232,36,49)" fg:x="556" fg:w="1"/><text x="50.4758%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.27%)</title><rect x="51.8519%" y="437" width="0.2710%" height="15" fill="rgb(209,103,24)" fg:x="574" fg:w="3"/><text x="52.1019%" y="447.50"></text></g><g><title>std::sync::mpmc::waker::Waker::notify (10 samples, 0.90%)</title><rect x="52.1229%" y="437" width="0.9033%" height="15" fill="rgb(229,88,8)" fg:x="577" fg:w="10"/><text x="52.3729%" y="447.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.63%)</title><rect x="52.3939%" y="421" width="0.6323%" height="15" fill="rgb(213,181,19)" fg:x="580" fg:w="7"/><text x="52.6439%" y="431.50"></text></g><g><title>[unknown] (592 samples, 53.48%)</title><rect x="0.0000%" y="517" width="53.4779%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="592"/><text x="0.2500%" y="527.50">[unknown]</text></g><g><title>cprs::Copier::copy (587 samples, 53.03%)</title><rect x="0.4517%" y="501" width="53.0262%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="587"/><text x="0.7017%" y="511.50">cprs::Copier::copy</text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (60 samples, 5.42%)</title><rect x="48.0578%" y="485" width="5.4201%" height="15" fill="rgb(233,36,39)" fg:x="532" fg:w="60"/><text x="48.3078%" y="495.50">std::sy..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (48 samples, 4.34%)</title><rect x="49.1418%" y="469" width="4.3360%" height="15" fill="rgb(226,3,54)" fg:x="544" fg:w="48"/><text x="49.3918%" y="479.50">std::..</text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (35 samples, 3.16%)</title><rect x="50.3162%" y="453" width="3.1617%" height="15" fill="rgb(245,192,40)" fg:x="557" fg:w="35"/><text x="50.5662%" y="463.50">std..</text></g><g><title>std::sys::pal::unix::futex::futex_wake (5 samples, 0.45%)</title><rect x="53.0262%" y="437" width="0.4517%" height="15" fill="rgb(238,167,29)" fg:x="587" fg:w="5"/><text x="53.2762%" y="447.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="53.3875%" y="421" width="0.0903%" height="15" fill="rgb(232,182,51)" fg:x="591" fg:w="1"/><text x="53.6375%" y="431.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.09%)</title><rect x="54.1102%" y="485" width="0.0903%" height="15" fill="rgb(231,60,39)" fg:x="599" fg:w="1"/><text x="54.3602%" y="495.50"></text></g><g><title>_int_malloc (1 samples, 0.09%)</title><rect x="54.4715%" y="373" width="0.0903%" height="15" fill="rgb(208,69,12)" fg:x="603" fg:w="1"/><text x="54.7215%" y="383.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.27%)</title><rect x="54.3812%" y="421" width="0.2710%" height="15" fill="rgb(235,93,37)" fg:x="602" fg:w="3"/><text x="54.6312%" y="431.50"></text></g><g><title>tcache_init (3 samples, 0.27%)</title><rect x="54.3812%" y="405" width="0.2710%" height="15" fill="rgb(213,116,39)" fg:x="602" fg:w="3"/><text x="54.6312%" y="415.50"></text></g><g><title>tcache_init (3 samples, 0.27%)</title><rect x="54.3812%" y="389" width="0.2710%" height="15" fill="rgb(222,207,29)" fg:x="602" fg:w="3"/><text x="54.6312%" y="399.50"></text></g><g><title>arena_get2 (1 samples, 0.09%)</title><rect x="54.5619%" y="373" width="0.0903%" height="15" fill="rgb(206,96,30)" fg:x="604" fg:w="1"/><text x="54.8119%" y="383.50"></text></g><g><title>arena_get2 (1 samples, 0.09%)</title><rect x="54.5619%" y="357" width="0.0903%" height="15" fill="rgb(218,138,4)" fg:x="604" fg:w="1"/><text x="54.8119%" y="367.50"></text></g><g><title>_int_new_arena (1 samples, 0.09%)</title><rect x="54.5619%" y="341" width="0.0903%" height="15" fill="rgb(250,191,14)" fg:x="604" fg:w="1"/><text x="54.8119%" y="351.50"></text></g><g><title>new_heap (1 samples, 0.09%)</title><rect x="54.5619%" y="325" width="0.0903%" height="15" fill="rgb(239,60,40)" fg:x="604" fg:w="1"/><text x="54.8119%" y="335.50"></text></g><g><title>alloc_new_heap (1 samples, 0.09%)</title><rect x="54.5619%" y="309" width="0.0903%" height="15" fill="rgb(206,27,48)" fg:x="604" fg:w="1"/><text x="54.8119%" y="319.50"></text></g><g><title>__GI___mprotect (1 samples, 0.09%)</title><rect x="54.5619%" y="293" width="0.0903%" height="15" fill="rgb(225,35,8)" fg:x="604" fg:w="1"/><text x="54.8119%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="54.5619%" y="277" width="0.0903%" height="15" fill="rgb(250,213,24)" fg:x="604" fg:w="1"/><text x="54.8119%" y="287.50"></text></g><g><title>__GI___pthread_attr_init (1 samples, 0.09%)</title><rect x="54.6522%" y="421" width="0.0903%" height="15" fill="rgb(247,123,22)" fg:x="605" fg:w="1"/><text x="54.9022%" y="431.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.09%)</title><rect x="54.6522%" y="405" width="0.0903%" height="15" fill="rgb(231,138,38)" fg:x="605" fg:w="1"/><text x="54.9022%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="54.7425%" y="405" width="0.0903%" height="15" fill="rgb(231,145,46)" fg:x="606" fg:w="1"/><text x="54.9925%" y="415.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (6 samples, 0.54%)</title><rect x="54.3812%" y="453" width="0.5420%" height="15" fill="rgb(251,118,11)" fg:x="602" fg:w="6"/><text x="54.6312%" y="463.50"></text></g><g><title>__pthread_getattr_np (6 samples, 0.54%)</title><rect x="54.3812%" y="437" width="0.5420%" height="15" fill="rgb(217,147,25)" fg:x="602" fg:w="6"/><text x="54.6312%" y="447.50"></text></g><g><title>__GI___pthread_attr_setaffinity_np (2 samples, 0.18%)</title><rect x="54.7425%" y="421" width="0.1807%" height="15" fill="rgb(247,81,37)" fg:x="606" fg:w="2"/><text x="54.9925%" y="431.50"></text></g><g><title>__pthread_attr_extension (1 samples, 0.09%)</title><rect x="54.8329%" y="405" width="0.0903%" height="15" fill="rgb(209,12,38)" fg:x="607" fg:w="1"/><text x="55.0829%" y="415.50"></text></g><g><title>__libc_calloc (1 samples, 0.09%)</title><rect x="54.8329%" y="389" width="0.0903%" height="15" fill="rgb(227,1,9)" fg:x="607" fg:w="1"/><text x="55.0829%" y="399.50"></text></g><g><title>_int_malloc (1 samples, 0.09%)</title><rect x="54.8329%" y="373" width="0.0903%" height="15" fill="rgb(248,47,43)" fg:x="607" fg:w="1"/><text x="55.0829%" y="383.50"></text></g><g><title>__GI___libc_free (4 samples, 0.36%)</title><rect x="55.0136%" y="437" width="0.3613%" height="15" fill="rgb(221,10,30)" fg:x="609" fg:w="4"/><text x="55.2636%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.27%)</title><rect x="56.0072%" y="421" width="0.2710%" height="15" fill="rgb(210,229,1)" fg:x="620" fg:w="3"/><text x="56.2572%" y="431.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="56.1879%" y="405" width="0.0903%" height="15" fill="rgb(222,148,37)" fg:x="622" fg:w="1"/><text x="56.4379%" y="415.50"></text></g><g><title>checked_request2size (1 samples, 0.09%)</title><rect x="56.1879%" y="389" width="0.0903%" height="15" fill="rgb(234,67,33)" fg:x="622" fg:w="1"/><text x="56.4379%" y="399.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.18%)</title><rect x="57.0912%" y="405" width="0.1807%" height="15" fill="rgb(247,98,35)" fg:x="632" fg:w="2"/><text x="57.3412%" y="415.50"></text></g><g><title>__GI___libc_free (1 samples, 0.09%)</title><rect x="57.1816%" y="389" width="0.0903%" height="15" fill="rgb(247,138,52)" fg:x="633" fg:w="1"/><text x="57.4316%" y="399.50"></text></g><g><title>__GI___libc_free (12 samples, 1.08%)</title><rect x="57.2719%" y="405" width="1.0840%" height="15" fill="rgb(213,79,30)" fg:x="634" fg:w="12"/><text x="57.5219%" y="415.50"></text></g><g><title>_int_free (3 samples, 0.27%)</title><rect x="58.0849%" y="389" width="0.2710%" height="15" fill="rgb(246,177,23)" fg:x="643" fg:w="3"/><text x="58.3349%" y="399.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.18%)</title><rect x="58.3559%" y="405" width="0.1807%" height="15" fill="rgb(230,62,27)" fg:x="646" fg:w="2"/><text x="58.6059%" y="415.50"></text></g><g><title>__rust_dealloc (5 samples, 0.45%)</title><rect x="58.5366%" y="405" width="0.4517%" height="15" fill="rgb(216,154,8)" fg:x="648" fg:w="5"/><text x="58.7866%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.18%)</title><rect x="59.1689%" y="357" width="0.1807%" height="15" fill="rgb(244,35,45)" fg:x="655" fg:w="2"/><text x="59.4189%" y="367.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="59.4399%" y="325" width="0.0903%" height="15" fill="rgb(251,115,12)" fg:x="658" fg:w="1"/><text x="59.6899%" y="335.50"></text></g><g><title>tcache_get (1 samples, 0.09%)</title><rect x="59.4399%" y="309" width="0.0903%" height="15" fill="rgb(240,54,50)" fg:x="658" fg:w="1"/><text x="59.6899%" y="319.50"></text></g><g><title>_int_malloc (3 samples, 0.27%)</title><rect x="59.6206%" y="293" width="0.2710%" height="15" fill="rgb(233,84,52)" fg:x="660" fg:w="3"/><text x="59.8706%" y="303.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.45%)</title><rect x="59.5303%" y="325" width="0.4517%" height="15" fill="rgb(207,117,47)" fg:x="659" fg:w="5"/><text x="59.7803%" y="335.50"></text></g><g><title>_int_realloc (4 samples, 0.36%)</title><rect x="59.6206%" y="309" width="0.3613%" height="15" fill="rgb(249,43,39)" fg:x="660" fg:w="4"/><text x="59.8706%" y="319.50"></text></g><g><title>unlink_chunk (1 samples, 0.09%)</title><rect x="59.8916%" y="293" width="0.0903%" height="15" fill="rgb(209,38,44)" fg:x="663" fg:w="1"/><text x="60.1416%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (12 samples, 1.08%)</title><rect x="58.9883%" y="405" width="1.0840%" height="15" fill="rgb(236,212,23)" fg:x="653" fg:w="12"/><text x="59.2383%" y="415.50"></text></g><g><title>core::fmt::write (10 samples, 0.90%)</title><rect x="59.1689%" y="389" width="0.9033%" height="15" fill="rgb(242,79,21)" fg:x="655" fg:w="10"/><text x="59.4189%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.90%)</title><rect x="59.1689%" y="373" width="0.9033%" height="15" fill="rgb(211,96,35)" fg:x="655" fg:w="10"/><text x="59.4189%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.72%)</title><rect x="59.3496%" y="357" width="0.7227%" height="15" fill="rgb(253,215,40)" fg:x="657" fg:w="8"/><text x="59.5996%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.63%)</title><rect x="59.4399%" y="341" width="0.6323%" height="15" fill="rgb(211,81,21)" fg:x="658" fg:w="7"/><text x="59.6899%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.09%)</title><rect x="59.9819%" y="325" width="0.0903%" height="15" fill="rgb(208,190,38)" fg:x="664" fg:w="1"/><text x="60.2319%" y="335.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (47 samples, 4.25%)</title><rect x="56.2782%" y="421" width="4.2457%" height="15" fill="rgb(235,213,38)" fg:x="623" fg:w="47"/><text x="56.5282%" y="431.50">&lt;core..</text></g><g><title>cprs::Copier::copy (5 samples, 0.45%)</title><rect x="60.0723%" y="405" width="0.4517%" height="15" fill="rgb(237,122,38)" fg:x="665" fg:w="5"/><text x="60.3223%" y="415.50"></text></g><g><title>__GI___libc_free (2 samples, 0.18%)</title><rect x="60.5239%" y="421" width="0.1807%" height="15" fill="rgb(244,218,35)" fg:x="670" fg:w="2"/><text x="60.7739%" y="431.50"></text></g><g><title>_int_free (1 samples, 0.09%)</title><rect x="60.6143%" y="405" width="0.0903%" height="15" fill="rgb(240,68,47)" fg:x="671" fg:w="1"/><text x="60.8643%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="60.7046%" y="421" width="0.0903%" height="15" fill="rgb(210,16,53)" fg:x="672" fg:w="1"/><text x="60.9546%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (3 samples, 0.27%)</title><rect x="61.1563%" y="389" width="0.2710%" height="15" fill="rgb(235,124,12)" fg:x="677" fg:w="3"/><text x="61.4063%" y="399.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.72%)</title><rect x="61.5176%" y="373" width="0.7227%" height="15" fill="rgb(224,169,11)" fg:x="681" fg:w="8"/><text x="61.7676%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="63.0533%" y="309" width="0.0903%" height="15" fill="rgb(250,166,2)" fg:x="698" fg:w="1"/><text x="63.3033%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (21 samples, 1.90%)</title><rect x="61.4273%" y="389" width="1.8970%" height="15" fill="rgb(242,216,29)" fg:x="680" fg:w="21"/><text x="61.6773%" y="399.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 1.08%)</title><rect x="62.2403%" y="373" width="1.0840%" height="15" fill="rgb(230,116,27)" fg:x="689" fg:w="12"/><text x="62.4903%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.72%)</title><rect x="62.6016%" y="357" width="0.7227%" height="15" fill="rgb(228,99,48)" fg:x="693" fg:w="8"/><text x="62.8516%" y="367.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.54%)</title><rect x="62.7823%" y="341" width="0.5420%" height="15" fill="rgb(253,11,6)" fg:x="695" fg:w="6"/><text x="63.0323%" y="351.50"></text></g><g><title>_int_realloc (4 samples, 0.36%)</title><rect x="62.9630%" y="325" width="0.3613%" height="15" fill="rgb(247,143,39)" fg:x="697" fg:w="4"/><text x="63.2130%" y="335.50"></text></g><g><title>_int_malloc (2 samples, 0.18%)</title><rect x="63.1436%" y="309" width="0.1807%" height="15" fill="rgb(236,97,10)" fg:x="699" fg:w="2"/><text x="63.3936%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (3 samples, 0.27%)</title><rect x="63.3243%" y="389" width="0.2710%" height="15" fill="rgb(233,208,19)" fg:x="701" fg:w="3"/><text x="63.5743%" y="399.50"></text></g><g><title>futures_executor::local_pool::block_on (94 samples, 8.49%)</title><rect x="55.3749%" y="437" width="8.4914%" height="15" fill="rgb(216,164,2)" fg:x="613" fg:w="94"/><text x="55.6249%" y="447.50">futures_exec..</text></g><g><title>alloc::fmt::format::format_inner (34 samples, 3.07%)</title><rect x="60.7949%" y="421" width="3.0714%" height="15" fill="rgb(220,129,5)" fg:x="673" fg:w="34"/><text x="61.0449%" y="431.50">all..</text></g><g><title>core::fmt::write (31 samples, 2.80%)</title><rect x="61.0659%" y="405" width="2.8004%" height="15" fill="rgb(242,17,10)" fg:x="676" fg:w="31"/><text x="61.3159%" y="415.50">co..</text></g><g><title>core::fmt::Formatter::pad (3 samples, 0.27%)</title><rect x="63.5953%" y="389" width="0.2710%" height="15" fill="rgb(242,107,0)" fg:x="704" fg:w="3"/><text x="63.8453%" y="399.50"></text></g><g><title>__GI___libc_free (1 samples, 0.09%)</title><rect x="64.4083%" y="309" width="0.0903%" height="15" fill="rgb(251,28,31)" fg:x="713" fg:w="1"/><text x="64.6583%" y="319.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="64.4986%" y="309" width="0.1807%" height="15" fill="rgb(233,223,10)" fg:x="714" fg:w="2"/><text x="64.7486%" y="319.50"></text></g><g><title>_int_malloc (1 samples, 0.09%)</title><rect x="64.5890%" y="293" width="0.0903%" height="15" fill="rgb(215,21,27)" fg:x="715" fg:w="1"/><text x="64.8390%" y="303.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1 samples, 0.09%)</title><rect x="64.7696%" y="117" width="0.0903%" height="15" fill="rgb(232,23,21)" fg:x="717" fg:w="1"/><text x="65.0196%" y="127.50"></text></g><g><title>&lt;rayon::iter::filter::FilterFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1 samples, 0.09%)</title><rect x="64.7696%" y="101" width="0.0903%" height="15" fill="rgb(244,5,23)" fg:x="717" fg:w="1"/><text x="65.0196%" y="111.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1 samples, 0.09%)</title><rect x="64.7696%" y="85" width="0.0903%" height="15" fill="rgb(226,81,46)" fg:x="717" fg:w="1"/><text x="65.0196%" y="95.50"></text></g><g><title>win_tree::tree::_build_par (1 samples, 0.09%)</title><rect x="64.7696%" y="69" width="0.0903%" height="15" fill="rgb(247,70,30)" fg:x="717" fg:w="1"/><text x="65.0196%" y="79.50"></text></g><g><title>std::sys::pal::unix::fs::lstat (1 samples, 0.09%)</title><rect x="64.7696%" y="53" width="0.0903%" height="15" fill="rgb(212,68,19)" fg:x="717" fg:w="1"/><text x="65.0196%" y="63.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (1 samples, 0.09%)</title><rect x="64.7696%" y="37" width="0.0903%" height="15" fill="rgb(240,187,13)" fg:x="717" fg:w="1"/><text x="65.0196%" y="47.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterBridge&lt;Iter&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (7 samples, 0.63%)</title><rect x="64.7696%" y="293" width="0.6323%" height="15" fill="rgb(223,113,26)" fg:x="717" fg:w="7"/><text x="65.0196%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (7 samples, 0.63%)</title><rect x="64.7696%" y="277" width="0.6323%" height="15" fill="rgb(206,192,2)" fg:x="717" fg:w="7"/><text x="65.0196%" y="287.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (7 samples, 0.63%)</title><rect x="64.7696%" y="261" width="0.6323%" height="15" fill="rgb(241,108,4)" fg:x="717" fg:w="7"/><text x="65.0196%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (7 samples, 0.63%)</title><rect x="64.7696%" y="245" width="0.6323%" height="15" fill="rgb(247,173,49)" fg:x="717" fg:w="7"/><text x="65.0196%" y="255.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (7 samples, 0.63%)</title><rect x="64.7696%" y="229" width="0.6323%" height="15" fill="rgb(224,114,35)" fg:x="717" fg:w="7"/><text x="65.0196%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (7 samples, 0.63%)</title><rect x="64.7696%" y="213" width="0.6323%" height="15" fill="rgb(245,159,27)" fg:x="717" fg:w="7"/><text x="65.0196%" y="223.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (7 samples, 0.63%)</title><rect x="64.7696%" y="197" width="0.6323%" height="15" fill="rgb(245,172,44)" fg:x="717" fg:w="7"/><text x="65.0196%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (7 samples, 0.63%)</title><rect x="64.7696%" y="181" width="0.6323%" height="15" fill="rgb(236,23,11)" fg:x="717" fg:w="7"/><text x="65.0196%" y="191.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (7 samples, 0.63%)</title><rect x="64.7696%" y="165" width="0.6323%" height="15" fill="rgb(205,117,38)" fg:x="717" fg:w="7"/><text x="65.0196%" y="175.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (7 samples, 0.63%)</title><rect x="64.7696%" y="149" width="0.6323%" height="15" fill="rgb(237,72,25)" fg:x="717" fg:w="7"/><text x="65.0196%" y="159.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (7 samples, 0.63%)</title><rect x="64.7696%" y="133" width="0.6323%" height="15" fill="rgb(244,70,9)" fg:x="717" fg:w="7"/><text x="65.0196%" y="143.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.54%)</title><rect x="64.8600%" y="117" width="0.5420%" height="15" fill="rgb(217,125,39)" fg:x="718" fg:w="6"/><text x="65.1100%" y="127.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.54%)</title><rect x="64.8600%" y="101" width="0.5420%" height="15" fill="rgb(235,36,10)" fg:x="718" fg:w="6"/><text x="65.1100%" y="111.50"></text></g><g><title>__GI___readdir64 (6 samples, 0.54%)</title><rect x="64.8600%" y="85" width="0.5420%" height="15" fill="rgb(251,123,47)" fg:x="718" fg:w="6"/><text x="65.1100%" y="95.50"></text></g><g><title>__GI___getdents64 (5 samples, 0.45%)</title><rect x="64.9503%" y="69" width="0.4517%" height="15" fill="rgb(221,13,13)" fg:x="719" fg:w="5"/><text x="65.2003%" y="79.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.45%)</title><rect x="65.4020%" y="293" width="0.4517%" height="15" fill="rgb(238,131,9)" fg:x="724" fg:w="5"/><text x="65.6520%" y="303.50"></text></g><g><title>tcache_get (1 samples, 0.09%)</title><rect x="65.7633%" y="277" width="0.0903%" height="15" fill="rgb(211,50,8)" fg:x="728" fg:w="1"/><text x="66.0133%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.09%)</title><rect x="65.8537%" y="293" width="0.0903%" height="15" fill="rgb(245,182,24)" fg:x="729" fg:w="1"/><text x="66.1037%" y="303.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (3 samples, 0.27%)</title><rect x="65.9440%" y="293" width="0.2710%" height="15" fill="rgb(242,14,37)" fg:x="730" fg:w="3"/><text x="66.1940%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.27%)</title><rect x="65.9440%" y="277" width="0.2710%" height="15" fill="rgb(246,228,12)" fg:x="730" fg:w="3"/><text x="66.1940%" y="287.50"></text></g><g><title>std::path::Path::file_name (10 samples, 0.90%)</title><rect x="66.2150%" y="293" width="0.9033%" height="15" fill="rgb(213,55,15)" fg:x="733" fg:w="10"/><text x="66.4650%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.54%)</title><rect x="67.4797%" y="277" width="0.5420%" height="15" fill="rgb(209,9,3)" fg:x="747" fg:w="6"/><text x="67.7297%" y="287.50"></text></g><g><title>&lt;rayon::iter::filter::FilterFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (193 samples, 17.43%)</title><rect x="64.1373%" y="341" width="17.4345%" height="15" fill="rgb(230,59,30)" fg:x="710" fg:w="193"/><text x="64.3873%" y="351.50">&lt;rayon::iter::filter::Filte..</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (193 samples, 17.43%)</title><rect x="64.1373%" y="325" width="17.4345%" height="15" fill="rgb(209,121,21)" fg:x="710" fg:w="193"/><text x="64.3873%" y="335.50">&lt;rayon::iter::for_each::For..</text></g><g><title>win_tree::tree::_build_par (187 samples, 16.89%)</title><rect x="64.6793%" y="309" width="16.8925%" height="15" fill="rgb(220,109,13)" fg:x="716" fg:w="187"/><text x="64.9293%" y="319.50">win_tree::tree::_build_par</text></g><g><title>std::sys::pal::unix::fs::lstat (160 samples, 14.45%)</title><rect x="67.1183%" y="293" width="14.4535%" height="15" fill="rgb(232,18,1)" fg:x="743" fg:w="160"/><text x="67.3683%" y="303.50">std::sys::pal::unix::f..</text></g><g><title>std::sys::pal::unix::fs::try_statx (150 samples, 13.55%)</title><rect x="68.0217%" y="277" width="13.5501%" height="15" fill="rgb(215,41,42)" fg:x="753" fg:w="150"/><text x="68.2717%" y="287.50">std::sys::pal::unix:..</text></g><g><title>statx (133 samples, 12.01%)</title><rect x="69.5574%" y="261" width="12.0145%" height="15" fill="rgb(224,123,36)" fg:x="770" fg:w="133"/><text x="69.8074%" y="271.50">statx</text></g><g><title>[unknown] (10 samples, 0.90%)</title><rect x="80.6685%" y="245" width="0.9033%" height="15" fill="rgb(240,125,3)" fg:x="893" fg:w="10"/><text x="80.9185%" y="255.50"></text></g><g><title>__GI___libc_free (1 samples, 0.09%)</title><rect x="81.5718%" y="341" width="0.0903%" height="15" fill="rgb(205,98,50)" fg:x="903" fg:w="1"/><text x="81.8218%" y="351.50"></text></g><g><title>__rust_dealloc (1 samples, 0.09%)</title><rect x="81.6621%" y="341" width="0.0903%" height="15" fill="rgb(205,185,37)" fg:x="904" fg:w="1"/><text x="81.9121%" y="351.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (197 samples, 17.80%)</title><rect x="64.0470%" y="357" width="17.7958%" height="15" fill="rgb(238,207,15)" fg:x="709" fg:w="197"/><text x="64.2970%" y="367.50">&lt;rayon::iter::map::MapFolder..</text></g><g><title>std::fs::DirEntry::path (1 samples, 0.09%)</title><rect x="81.7525%" y="341" width="0.0903%" height="15" fill="rgb(213,199,42)" fg:x="905" fg:w="1"/><text x="82.0025%" y="351.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.09%)</title><rect x="81.7525%" y="325" width="0.0903%" height="15" fill="rgb(235,201,11)" fg:x="905" fg:w="1"/><text x="82.0025%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="81.7525%" y="309" width="0.0903%" height="15" fill="rgb(207,46,11)" fg:x="905" fg:w="1"/><text x="82.0025%" y="319.50"></text></g><g><title>__GI___errno_location (2 samples, 0.18%)</title><rect x="81.8428%" y="325" width="0.1807%" height="15" fill="rgb(241,35,35)" fg:x="906" fg:w="2"/><text x="82.0928%" y="335.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.09%)</title><rect x="82.0235%" y="325" width="0.0903%" height="15" fill="rgb(243,32,47)" fg:x="908" fg:w="1"/><text x="82.2735%" y="335.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.36%)</title><rect x="82.2042%" y="309" width="0.3613%" height="15" fill="rgb(247,202,23)" fg:x="910" fg:w="4"/><text x="82.4542%" y="319.50"></text></g><g><title>_int_malloc (2 samples, 0.18%)</title><rect x="82.3848%" y="293" width="0.1807%" height="15" fill="rgb(219,102,11)" fg:x="912" fg:w="2"/><text x="82.6348%" y="303.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.81%)</title><rect x="81.8428%" y="357" width="0.8130%" height="15" fill="rgb(243,110,44)" fg:x="906" fg:w="9"/><text x="82.0928%" y="367.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.81%)</title><rect x="81.8428%" y="341" width="0.8130%" height="15" fill="rgb(222,74,54)" fg:x="906" fg:w="9"/><text x="82.0928%" y="351.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt; for alloc::boxed::Box&lt;core::ffi::c_str::CStr&gt;&gt;::from (6 samples, 0.54%)</title><rect x="82.1138%" y="325" width="0.5420%" height="15" fill="rgb(216,99,12)" fg:x="909" fg:w="6"/><text x="82.3638%" y="335.50"></text></g><g><title>__rust_alloc (1 samples, 0.09%)</title><rect x="82.5655%" y="309" width="0.0903%" height="15" fill="rgb(226,22,26)" fg:x="914" fg:w="1"/><text x="82.8155%" y="319.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (214 samples, 19.33%)</title><rect x="63.8663%" y="373" width="19.3315%" height="15" fill="rgb(217,163,10)" fg:x="707" fg:w="214"/><text x="64.1163%" y="383.50">&lt;&amp;rayon::iter::par_bridge::Ite..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (6 samples, 0.54%)</title><rect x="82.6558%" y="357" width="0.5420%" height="15" fill="rgb(213,25,53)" fg:x="915" fg:w="6"/><text x="82.9058%" y="367.50"></text></g><g><title>syscall (6 samples, 0.54%)</title><rect x="82.6558%" y="341" width="0.5420%" height="15" fill="rgb(252,105,26)" fg:x="915" fg:w="6"/><text x="82.9058%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="83.2882%" y="229" width="0.1807%" height="15" fill="rgb(220,39,43)" fg:x="922" fg:w="2"/><text x="83.5382%" y="239.50"></text></g><g><title>tcache_get (1 samples, 0.09%)</title><rect x="83.3785%" y="213" width="0.0903%" height="15" fill="rgb(229,68,48)" fg:x="923" fg:w="1"/><text x="83.6285%" y="223.50"></text></g><g><title>&lt;rayon::iter::filter::FilterFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (33 samples, 2.98%)</title><rect x="83.1978%" y="277" width="2.9810%" height="15" fill="rgb(252,8,32)" fg:x="921" fg:w="33"/><text x="83.4478%" y="287.50">&lt;ra..</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (33 samples, 2.98%)</title><rect x="83.1978%" y="261" width="2.9810%" height="15" fill="rgb(223,20,43)" fg:x="921" fg:w="33"/><text x="83.4478%" y="271.50">&lt;ra..</text></g><g><title>win_tree::tree::_build_par (32 samples, 2.89%)</title><rect x="83.2882%" y="245" width="2.8907%" height="15" fill="rgb(229,81,49)" fg:x="922" fg:w="32"/><text x="83.5382%" y="255.50">wi..</text></g><g><title>std::sys::pal::unix::fs::lstat (30 samples, 2.71%)</title><rect x="83.4688%" y="229" width="2.7100%" height="15" fill="rgb(236,28,36)" fg:x="924" fg:w="30"/><text x="83.7188%" y="239.50">st..</text></g><g><title>std::sys::pal::unix::fs::try_statx (30 samples, 2.71%)</title><rect x="83.4688%" y="213" width="2.7100%" height="15" fill="rgb(249,185,26)" fg:x="924" fg:w="30"/><text x="83.7188%" y="223.50">st..</text></g><g><title>statx (26 samples, 2.35%)</title><rect x="83.8302%" y="197" width="2.3487%" height="15" fill="rgb(249,174,33)" fg:x="928" fg:w="26"/><text x="84.0802%" y="207.50">s..</text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="85.9982%" y="181" width="0.1807%" height="15" fill="rgb(233,201,37)" fg:x="952" fg:w="2"/><text x="86.2482%" y="191.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (34 samples, 3.07%)</title><rect x="83.1978%" y="293" width="3.0714%" height="15" fill="rgb(221,78,26)" fg:x="921" fg:w="34"/><text x="83.4478%" y="303.50">&lt;ra..</text></g><g><title>std::fs::DirEntry::path (1 samples, 0.09%)</title><rect x="86.1789%" y="277" width="0.0903%" height="15" fill="rgb(250,127,30)" fg:x="954" fg:w="1"/><text x="86.4289%" y="287.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.09%)</title><rect x="86.1789%" y="261" width="0.0903%" height="15" fill="rgb(230,49,44)" fg:x="954" fg:w="1"/><text x="86.4289%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="86.1789%" y="245" width="0.0903%" height="15" fill="rgb(229,67,23)" fg:x="954" fg:w="1"/><text x="86.4289%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="86.1789%" y="229" width="0.0903%" height="15" fill="rgb(249,83,47)" fg:x="954" fg:w="1"/><text x="86.4289%" y="239.50"></text></g><g><title>__strlen_avx2 (1 samples, 0.09%)</title><rect x="86.2692%" y="261" width="0.0903%" height="15" fill="rgb(215,43,3)" fg:x="955" fg:w="1"/><text x="86.5192%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (250 samples, 22.58%)</title><rect x="63.8663%" y="389" width="22.5836%" height="15" fill="rgb(238,154,13)" fg:x="707" fg:w="250"/><text x="64.1163%" y="399.50">rayon::iter::plumbing::bridge_uninde..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (36 samples, 3.25%)</title><rect x="83.1978%" y="373" width="3.2520%" height="15" fill="rgb(219,56,2)" fg:x="921" fg:w="36"/><text x="83.4478%" y="383.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (36 samples, 3.25%)</title><rect x="83.1978%" y="357" width="3.2520%" height="15" fill="rgb(233,0,4)" fg:x="921" fg:w="36"/><text x="83.4478%" y="367.50">ray..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (36 samples, 3.25%)</title><rect x="83.1978%" y="341" width="3.2520%" height="15" fill="rgb(235,30,7)" fg:x="921" fg:w="36"/><text x="83.4478%" y="351.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (36 samples, 3.25%)</title><rect x="83.1978%" y="325" width="3.2520%" height="15" fill="rgb(250,79,13)" fg:x="921" fg:w="36"/><text x="83.4478%" y="335.50">ray..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (36 samples, 3.25%)</title><rect x="83.1978%" y="309" width="3.2520%" height="15" fill="rgb(211,146,34)" fg:x="921" fg:w="36"/><text x="83.4478%" y="319.50">&lt;&amp;r..</text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="86.2692%" y="293" width="0.1807%" height="15" fill="rgb(228,22,38)" fg:x="955" fg:w="2"/><text x="86.5192%" y="303.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="86.2692%" y="277" width="0.1807%" height="15" fill="rgb(235,168,5)" fg:x="955" fg:w="2"/><text x="86.5192%" y="287.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt; for alloc::boxed::Box&lt;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.09%)</title><rect x="86.3595%" y="261" width="0.0903%" height="15" fill="rgb(221,155,16)" fg:x="956" fg:w="1"/><text x="86.6095%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="86.3595%" y="245" width="0.0903%" height="15" fill="rgb(215,215,53)" fg:x="956" fg:w="1"/><text x="86.6095%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.09%)</title><rect x="86.3595%" y="229" width="0.0903%" height="15" fill="rgb(223,4,10)" fg:x="956" fg:w="1"/><text x="86.6095%" y="239.50"></text></g><g><title>checked_request2size (1 samples, 0.09%)</title><rect x="86.3595%" y="213" width="0.0903%" height="15" fill="rgb(234,103,6)" fg:x="956" fg:w="1"/><text x="86.6095%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="86.5402%" y="117" width="0.0903%" height="15" fill="rgb(227,97,0)" fg:x="958" fg:w="1"/><text x="86.7902%" y="127.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.18%)</title><rect x="86.6305%" y="101" width="0.1807%" height="15" fill="rgb(234,150,53)" fg:x="959" fg:w="2"/><text x="86.8805%" y="111.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (26 samples, 2.35%)</title><rect x="86.4499%" y="309" width="2.3487%" height="15" fill="rgb(228,201,54)" fg:x="957" fg:w="26"/><text x="86.6999%" y="319.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (26 samples, 2.35%)</title><rect x="86.4499%" y="293" width="2.3487%" height="15" fill="rgb(222,22,37)" fg:x="957" fg:w="26"/><text x="86.6999%" y="303.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (26 samples, 2.35%)</title><rect x="86.4499%" y="277" width="2.3487%" height="15" fill="rgb(237,53,32)" fg:x="957" fg:w="26"/><text x="86.6999%" y="287.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (26 samples, 2.35%)</title><rect x="86.4499%" y="261" width="2.3487%" height="15" fill="rgb(233,25,53)" fg:x="957" fg:w="26"/><text x="86.6999%" y="271.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (26 samples, 2.35%)</title><rect x="86.4499%" y="245" width="2.3487%" height="15" fill="rgb(210,40,34)" fg:x="957" fg:w="26"/><text x="86.6999%" y="255.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (26 samples, 2.35%)</title><rect x="86.4499%" y="229" width="2.3487%" height="15" fill="rgb(241,220,44)" fg:x="957" fg:w="26"/><text x="86.6999%" y="239.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (26 samples, 2.35%)</title><rect x="86.4499%" y="213" width="2.3487%" height="15" fill="rgb(235,28,35)" fg:x="957" fg:w="26"/><text x="86.6999%" y="223.50">r..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (26 samples, 2.35%)</title><rect x="86.4499%" y="197" width="2.3487%" height="15" fill="rgb(210,56,17)" fg:x="957" fg:w="26"/><text x="86.6999%" y="207.50">&lt;..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (26 samples, 2.35%)</title><rect x="86.4499%" y="181" width="2.3487%" height="15" fill="rgb(224,130,29)" fg:x="957" fg:w="26"/><text x="86.6999%" y="191.50">&lt;..</text></g><g><title>&lt;rayon::iter::filter::FilterFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (26 samples, 2.35%)</title><rect x="86.4499%" y="165" width="2.3487%" height="15" fill="rgb(235,212,8)" fg:x="957" fg:w="26"/><text x="86.6999%" y="175.50">&lt;..</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (25 samples, 2.26%)</title><rect x="86.5402%" y="149" width="2.2584%" height="15" fill="rgb(223,33,50)" fg:x="958" fg:w="25"/><text x="86.7902%" y="159.50">&lt;..</text></g><g><title>win_tree::tree::_build_par (25 samples, 2.26%)</title><rect x="86.5402%" y="133" width="2.2584%" height="15" fill="rgb(219,149,13)" fg:x="958" fg:w="25"/><text x="86.7902%" y="143.50">w..</text></g><g><title>std::sys::pal::unix::fs::lstat (24 samples, 2.17%)</title><rect x="86.6305%" y="117" width="2.1680%" height="15" fill="rgb(250,156,29)" fg:x="959" fg:w="24"/><text x="86.8805%" y="127.50">s..</text></g><g><title>std::sys::pal::unix::fs::try_statx (22 samples, 1.99%)</title><rect x="86.8112%" y="101" width="1.9874%" height="15" fill="rgb(216,193,19)" fg:x="961" fg:w="22"/><text x="87.0612%" y="111.50">s..</text></g><g><title>statx (20 samples, 1.81%)</title><rect x="86.9919%" y="85" width="1.8067%" height="15" fill="rgb(216,135,14)" fg:x="963" fg:w="20"/><text x="87.2419%" y="95.50">s..</text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="88.7082%" y="69" width="0.0903%" height="15" fill="rgb(241,47,5)" fg:x="982" fg:w="1"/><text x="88.9582%" y="79.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (277 samples, 25.02%)</title><rect x="63.8663%" y="405" width="25.0226%" height="15" fill="rgb(233,42,35)" fg:x="707" fg:w="277"/><text x="64.1163%" y="415.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as ray..</text></g><g><title>rayon_core::join::join_context::{{closure}} (27 samples, 2.44%)</title><rect x="86.4499%" y="389" width="2.4390%" height="15" fill="rgb(231,13,6)" fg:x="957" fg:w="27"/><text x="86.6999%" y="399.50">ra..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (27 samples, 2.44%)</title><rect x="86.4499%" y="373" width="2.4390%" height="15" fill="rgb(207,181,40)" fg:x="957" fg:w="27"/><text x="86.6999%" y="383.50">ra..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (27 samples, 2.44%)</title><rect x="86.4499%" y="357" width="2.4390%" height="15" fill="rgb(254,173,49)" fg:x="957" fg:w="27"/><text x="86.6999%" y="367.50">ra..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (27 samples, 2.44%)</title><rect x="86.4499%" y="341" width="2.4390%" height="15" fill="rgb(221,1,38)" fg:x="957" fg:w="27"/><text x="86.6999%" y="351.50">ra..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (27 samples, 2.44%)</title><rect x="86.4499%" y="325" width="2.4390%" height="15" fill="rgb(206,124,46)" fg:x="957" fg:w="27"/><text x="86.6999%" y="335.50">ra..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.09%)</title><rect x="88.7986%" y="309" width="0.0903%" height="15" fill="rgb(249,21,11)" fg:x="983" fg:w="1"/><text x="89.0486%" y="319.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 0.09%)</title><rect x="88.7986%" y="293" width="0.0903%" height="15" fill="rgb(222,201,40)" fg:x="983" fg:w="1"/><text x="89.0486%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (1 samples, 0.09%)</title><rect x="88.7986%" y="277" width="0.0903%" height="15" fill="rgb(235,61,29)" fg:x="983" fg:w="1"/><text x="89.0486%" y="287.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (1 samples, 0.09%)</title><rect x="88.7986%" y="261" width="0.0903%" height="15" fill="rgb(219,207,3)" fg:x="983" fg:w="1"/><text x="89.0486%" y="271.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1 samples, 0.09%)</title><rect x="88.7986%" y="245" width="0.0903%" height="15" fill="rgb(222,56,46)" fg:x="983" fg:w="1"/><text x="89.0486%" y="255.50"></text></g><g><title>&lt;rayon::iter::filter::FilterFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1 samples, 0.09%)</title><rect x="88.7986%" y="229" width="0.0903%" height="15" fill="rgb(239,76,54)" fg:x="983" fg:w="1"/><text x="89.0486%" y="239.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1 samples, 0.09%)</title><rect x="88.7986%" y="213" width="0.0903%" height="15" fill="rgb(231,124,27)" fg:x="983" fg:w="1"/><text x="89.0486%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.09%)</title><rect x="88.7986%" y="197" width="0.0903%" height="15" fill="rgb(249,195,6)" fg:x="983" fg:w="1"/><text x="89.0486%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.09%)</title><rect x="88.7986%" y="181" width="0.0903%" height="15" fill="rgb(237,174,47)" fg:x="983" fg:w="1"/><text x="89.0486%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.18%)</title><rect x="88.8889%" y="389" width="0.1807%" height="15" fill="rgb(206,201,31)" fg:x="984" fg:w="2"/><text x="89.1389%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.09%)</title><rect x="88.9792%" y="373" width="0.0903%" height="15" fill="rgb(231,57,52)" fg:x="985" fg:w="1"/><text x="89.2292%" y="383.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1 samples, 0.09%)</title><rect x="88.9792%" y="357" width="0.0903%" height="15" fill="rgb(248,177,22)" fg:x="985" fg:w="1"/><text x="89.2292%" y="367.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (3 samples, 0.27%)</title><rect x="88.8889%" y="405" width="0.2710%" height="15" fill="rgb(215,211,37)" fg:x="984" fg:w="3"/><text x="89.1389%" y="415.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (1 samples, 0.09%)</title><rect x="89.0696%" y="389" width="0.0903%" height="15" fill="rgb(241,128,51)" fg:x="986" fg:w="1"/><text x="89.3196%" y="399.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (294 samples, 26.56%)</title><rect x="63.8663%" y="437" width="26.5583%" height="15" fill="rgb(227,165,31)" fg:x="707" fg:w="294"/><text x="64.1163%" y="447.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (294 samples, 26.56%)</title><rect x="63.8663%" y="421" width="26.5583%" height="15" fill="rgb(228,167,24)" fg:x="707" fg:w="294"/><text x="64.1163%" y="431.50">rayon_core::registry::WorkerThread::wait_un..</text></g><g><title>rayon_core::sleep::Sleep::sleep (14 samples, 1.26%)</title><rect x="89.1599%" y="405" width="1.2647%" height="15" fill="rgb(228,143,12)" fg:x="987" fg:w="14"/><text x="89.4099%" y="415.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (14 samples, 1.26%)</title><rect x="89.1599%" y="389" width="1.2647%" height="15" fill="rgb(249,149,8)" fg:x="987" fg:w="14"/><text x="89.4099%" y="399.50"></text></g><g><title>syscall (10 samples, 0.90%)</title><rect x="89.5212%" y="373" width="0.9033%" height="15" fill="rgb(243,35,44)" fg:x="991" fg:w="10"/><text x="89.7712%" y="383.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.09%)</title><rect x="90.4246%" y="437" width="0.0903%" height="15" fill="rgb(246,89,9)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="447.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.09%)</title><rect x="90.4246%" y="421" width="0.0903%" height="15" fill="rgb(233,213,13)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="90.4246%" y="405" width="0.0903%" height="15" fill="rgb(233,141,41)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="415.50"></text></g><g><title>&lt;cprs::State as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="90.4246%" y="389" width="0.0903%" height="15" fill="rgb(239,167,4)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.09%)</title><rect x="90.4246%" y="373" width="0.0903%" height="15" fill="rgb(209,217,16)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="90.4246%" y="357" width="0.0903%" height="15" fill="rgb(219,88,35)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.09%)</title><rect x="90.4246%" y="341" width="0.0903%" height="15" fill="rgb(220,193,23)" fg:x="1001" fg:w="1"/><text x="90.6746%" y="351.50"></text></g><g><title>std::sync::mpmc::waker::Waker::notify (3 samples, 0.27%)</title><rect x="90.7859%" y="389" width="0.2710%" height="15" fill="rgb(230,90,52)" fg:x="1005" fg:w="3"/><text x="91.0359%" y="399.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.18%)</title><rect x="90.8762%" y="373" width="0.1807%" height="15" fill="rgb(252,106,19)" fg:x="1006" fg:w="2"/><text x="91.1262%" y="383.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (8 samples, 0.72%)</title><rect x="90.5149%" y="437" width="0.7227%" height="15" fill="rgb(206,74,20)" fg:x="1002" fg:w="8"/><text x="90.7649%" y="447.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (8 samples, 0.72%)</title><rect x="90.5149%" y="421" width="0.7227%" height="15" fill="rgb(230,138,44)" fg:x="1002" fg:w="8"/><text x="90.7649%" y="431.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (6 samples, 0.54%)</title><rect x="90.6956%" y="405" width="0.5420%" height="15" fill="rgb(235,182,43)" fg:x="1004" fg:w="6"/><text x="90.9456%" y="415.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (2 samples, 0.18%)</title><rect x="91.0569%" y="389" width="0.1807%" height="15" fill="rgb(242,16,51)" fg:x="1008" fg:w="2"/><text x="91.3069%" y="399.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="91.1472%" y="373" width="0.0903%" height="15" fill="rgb(248,9,4)" fg:x="1009" fg:w="1"/><text x="91.3972%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.09%)</title><rect x="92.0506%" y="421" width="0.0903%" height="15" fill="rgb(210,31,22)" fg:x="1019" fg:w="1"/><text x="92.3006%" y="431.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::register (3 samples, 0.27%)</title><rect x="92.5023%" y="405" width="0.2710%" height="15" fill="rgb(239,54,39)" fg:x="1024" fg:w="3"/><text x="92.7523%" y="415.50"></text></g><g><title>std::sys_common::thread_info::current_thread (1 samples, 0.09%)</title><rect x="93.8573%" y="389" width="0.0903%" height="15" fill="rgb(230,99,41)" fg:x="1039" fg:w="1"/><text x="94.1073%" y="399.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (65 samples, 5.87%)</title><rect x="91.2376%" y="437" width="5.8717%" height="15" fill="rgb(253,106,12)" fg:x="1010" fg:w="65"/><text x="91.4876%" y="447.50">std::sy..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv::{{closure}} (55 samples, 4.97%)</title><rect x="92.1409%" y="421" width="4.9684%" height="15" fill="rgb(213,46,41)" fg:x="1020" fg:w="55"/><text x="92.3909%" y="431.50">std::s..</text></g><g><title>std::thread::park (48 samples, 4.34%)</title><rect x="92.7733%" y="405" width="4.3360%" height="15" fill="rgb(215,133,35)" fg:x="1027" fg:w="48"/><text x="93.0233%" y="415.50">std::..</text></g><g><title>syscall (35 samples, 3.16%)</title><rect x="93.9476%" y="389" width="3.1617%" height="15" fill="rgb(213,28,5)" fg:x="1040" fg:w="35"/><text x="94.1976%" y="399.50">sys..</text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="96.8383%" y="373" width="0.2710%" height="15" fill="rgb(215,77,49)" fg:x="1072" fg:w="3"/><text x="97.0883%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (13 samples, 1.17%)</title><rect x="97.1093%" y="437" width="1.1743%" height="15" fill="rgb(248,100,22)" fg:x="1075" fg:w="13"/><text x="97.3593%" y="447.50"></text></g><g><title>__GI___clock_gettime (10 samples, 0.90%)</title><rect x="97.3803%" y="421" width="0.9033%" height="15" fill="rgb(208,67,9)" fg:x="1078" fg:w="10"/><text x="97.6303%" y="431.50"></text></g><g><title>__vdso_clock_gettime (7 samples, 0.63%)</title><rect x="97.6513%" y="405" width="0.6323%" height="15" fill="rgb(219,133,21)" fg:x="1081" fg:w="7"/><text x="97.9013%" y="415.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.09%)</title><rect x="98.2836%" y="437" width="0.0903%" height="15" fill="rgb(246,46,29)" fg:x="1088" fg:w="1"/><text x="98.5336%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (488 samples, 44.08%)</title><rect x="54.3812%" y="469" width="44.0831%" height="15" fill="rgb(246,185,52)" fg:x="602" fg:w="488"/><text x="54.6312%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (482 samples, 43.54%)</title><rect x="54.9232%" y="453" width="43.5411%" height="15" fill="rgb(252,136,11)" fg:x="608" fg:w="482"/><text x="55.1732%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::time::Instant::now (1 samples, 0.09%)</title><rect x="98.3740%" y="437" width="0.0903%" height="15" fill="rgb(219,138,53)" fg:x="1089" fg:w="1"/><text x="98.6240%" y="447.50"></text></g><g><title>__GI___getauxval (1 samples, 0.09%)</title><rect x="98.4643%" y="453" width="0.0903%" height="15" fill="rgb(211,51,23)" fg:x="1090" fg:w="1"/><text x="98.7143%" y="463.50"></text></g><g><title>__GI___getauxval2 (1 samples, 0.09%)</title><rect x="98.4643%" y="437" width="0.0903%" height="15" fill="rgb(247,221,28)" fg:x="1090" fg:w="1"/><text x="98.7143%" y="447.50"></text></g><g><title>__GI___getauxval2 (1 samples, 0.09%)</title><rect x="98.4643%" y="421" width="0.0903%" height="15" fill="rgb(251,222,45)" fg:x="1090" fg:w="1"/><text x="98.7143%" y="431.50"></text></g><g><title>__clone3 (500 samples, 45.17%)</title><rect x="53.4779%" y="517" width="45.1671%" height="15" fill="rgb(217,162,53)" fg:x="592" fg:w="500"/><text x="53.7279%" y="527.50">__clone3</text></g><g><title>start_thread (494 samples, 44.63%)</title><rect x="54.0199%" y="501" width="44.6251%" height="15" fill="rgb(229,93,14)" fg:x="598" fg:w="494"/><text x="54.2699%" y="511.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (492 samples, 44.44%)</title><rect x="54.2005%" y="485" width="44.4444%" height="15" fill="rgb(209,67,49)" fg:x="600" fg:w="492"/><text x="54.4505%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.18%)</title><rect x="98.4643%" y="469" width="0.1807%" height="15" fill="rgb(213,87,29)" fg:x="1090" fg:w="2"/><text x="98.7143%" y="479.50"></text></g><g><title>__GI___sysconf (1 samples, 0.09%)</title><rect x="98.5547%" y="453" width="0.0903%" height="15" fill="rgb(205,151,52)" fg:x="1091" fg:w="1"/><text x="98.8047%" y="463.50"></text></g><g><title>linux_sysconf (1 samples, 0.09%)</title><rect x="98.5547%" y="437" width="0.0903%" height="15" fill="rgb(253,215,39)" fg:x="1091" fg:w="1"/><text x="98.8047%" y="447.50"></text></g><g><title>posix_sysconf (1 samples, 0.09%)</title><rect x="98.5547%" y="421" width="0.0903%" height="15" fill="rgb(221,220,41)" fg:x="1091" fg:w="1"/><text x="98.8047%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="99.0967%" y="501" width="0.0903%" height="15" fill="rgb(218,133,21)" fg:x="1097" fg:w="1"/><text x="99.3467%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;cprs::Copier&gt; (1 samples, 0.09%)</title><rect x="99.1870%" y="389" width="0.0903%" height="15" fill="rgb(221,193,43)" fg:x="1098" fg:w="1"/><text x="99.4370%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="99.1870%" y="373" width="0.0903%" height="15" fill="rgb(240,128,52)" fg:x="1098" fg:w="1"/><text x="99.4370%" y="383.50"></text></g><g><title>__libc_start_main_impl (7 samples, 0.63%)</title><rect x="99.1870%" y="501" width="0.6323%" height="15" fill="rgb(253,114,12)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="511.50"></text></g><g><title>__libc_start_call_main (7 samples, 0.63%)</title><rect x="99.1870%" y="485" width="0.6323%" height="15" fill="rgb(215,223,47)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="495.50"></text></g><g><title>main (7 samples, 0.63%)</title><rect x="99.1870%" y="469" width="0.6323%" height="15" fill="rgb(248,225,23)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="479.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.63%)</title><rect x="99.1870%" y="453" width="0.6323%" height="15" fill="rgb(250,108,0)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="463.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 0.63%)</title><rect x="99.1870%" y="437" width="0.6323%" height="15" fill="rgb(228,208,7)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="447.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.63%)</title><rect x="99.1870%" y="421" width="0.6323%" height="15" fill="rgb(244,45,10)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="431.50"></text></g><g><title>cprs::main (7 samples, 0.63%)</title><rect x="99.1870%" y="405" width="0.6323%" height="15" fill="rgb(207,125,25)" fg:x="1098" fg:w="7"/><text x="99.4370%" y="415.50"></text></g><g><title>std::thread::spawn (6 samples, 0.54%)</title><rect x="99.2773%" y="389" width="0.5420%" height="15" fill="rgb(210,195,18)" fg:x="1099" fg:w="6"/><text x="99.5273%" y="399.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (6 samples, 0.54%)</title><rect x="99.2773%" y="373" width="0.5420%" height="15" fill="rgb(249,80,12)" fg:x="1099" fg:w="6"/><text x="99.5273%" y="383.50"></text></g><g><title>__pthread_create_2_1 (6 samples, 0.54%)</title><rect x="99.2773%" y="357" width="0.5420%" height="15" fill="rgb(221,65,9)" fg:x="1099" fg:w="6"/><text x="99.5273%" y="367.50"></text></g><g><title>allocate_stack (6 samples, 0.54%)</title><rect x="99.2773%" y="341" width="0.5420%" height="15" fill="rgb(235,49,36)" fg:x="1099" fg:w="6"/><text x="99.5273%" y="351.50"></text></g><g><title>__GI__dl_allocate_tls (1 samples, 0.09%)</title><rect x="99.7290%" y="325" width="0.0903%" height="15" fill="rgb(225,32,20)" fg:x="1104" fg:w="1"/><text x="99.9790%" y="335.50"></text></g><g><title>allocate_dtv (1 samples, 0.09%)</title><rect x="99.7290%" y="309" width="0.0903%" height="15" fill="rgb(215,141,46)" fg:x="1104" fg:w="1"/><text x="99.9790%" y="319.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="99.7290%" y="293" width="0.0903%" height="15" fill="rgb(250,160,47)" fg:x="1104" fg:w="1"/><text x="99.9790%" y="303.50"></text></g><g><title>dl_main (1 samples, 0.09%)</title><rect x="99.8193%" y="453" width="0.0903%" height="15" fill="rgb(216,222,40)" fg:x="1105" fg:w="1"/><text x="100.0693%" y="463.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.09%)</title><rect x="99.8193%" y="437" width="0.0903%" height="15" fill="rgb(234,217,39)" fg:x="1105" fg:w="1"/><text x="100.0693%" y="447.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.09%)</title><rect x="99.8193%" y="421" width="0.0903%" height="15" fill="rgb(207,178,40)" fg:x="1105" fg:w="1"/><text x="100.0693%" y="431.50"></text></g><g><title>all (1,107 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="1107"/><text x="0.2500%" y="559.50"></text></g><g><title>cprs (1,107 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="1107"/><text x="0.2500%" y="543.50">cprs</text></g><g><title>_start (15 samples, 1.36%)</title><rect x="98.6450%" y="517" width="1.3550%" height="15" fill="rgb(249,222,13)" fg:x="1092" fg:w="15"/><text x="98.8950%" y="527.50"></text></g><g><title>_dl_start (2 samples, 0.18%)</title><rect x="99.8193%" y="501" width="0.1807%" height="15" fill="rgb(244,185,38)" fg:x="1105" fg:w="2"/><text x="100.0693%" y="511.50"></text></g><g><title>_dl_start_final (2 samples, 0.18%)</title><rect x="99.8193%" y="485" width="0.1807%" height="15" fill="rgb(236,202,9)" fg:x="1105" fg:w="2"/><text x="100.0693%" y="495.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.18%)</title><rect x="99.8193%" y="469" width="0.1807%" height="15" fill="rgb(250,229,37)" fg:x="1105" fg:w="2"/><text x="100.0693%" y="479.50"></text></g><g><title>dl_platform_init (1 samples, 0.09%)</title><rect x="99.9097%" y="453" width="0.0903%" height="15" fill="rgb(206,174,23)" fg:x="1106" fg:w="1"/><text x="100.1597%" y="463.50"></text></g><g><title>init_cpu_features (1 samples, 0.09%)</title><rect x="99.9097%" y="437" width="0.0903%" height="15" fill="rgb(211,33,43)" fg:x="1106" fg:w="1"/><text x="100.1597%" y="447.50"></text></g><g><title>get_common_indices (1 samples, 0.09%)</title><rect x="99.9097%" y="421" width="0.0903%" height="15" fill="rgb(245,58,50)" fg:x="1106" fg:w="1"/><text x="100.1597%" y="431.50"></text></g></svg></svg>